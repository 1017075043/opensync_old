# log4cpp.properties
//设置分类
#getRoot调用，rootCategory必须得有，所有的日志都会到rootCategory的输出器中
log4cpp.rootCategory=DEBUG, rootAppender
#sub1是分类名字,"DEBUG,xx","DEBUG"表示的最低的优先级（DEBUG<INFO<WARN<ERROR），后面可以对具体输出实例，再次调整优先级。xx就是输出实例，可一个message可以挂在好几个输出实例。getInstance(std::string("sub1"))调用
log4cpp.category.sub1=DEBUG, A1
#sub1.sub2是名字。getInstance(std::string("sub1.sub2"))调用
#log4cpp.category.sub1.sub2=DEBUG, A2, A3

#对输出实例进行配置
#ConsoleAppender/FileAppender输出方式
log4cpp.appender.rootAppender=ConsoleAppender
#PatternLayout可以自定义自己的输出格式,用后面的ConversionPattern设置
log4cpp.appender.rootAppender.layout=PatternLayout
#ConversionPattern设置输出格式 %d表示打印日期，%p表示打印优先级 %m日志本体 %n 平台特定的行分隔符
log4cpp.appender.rootAppender.layout.ConversionPattern=%d [%p] %m%n 

#FileAppender方式输出
log4cpp.appender.A1=FileAppender
#threshold 日志等级的阈值
log4cpp.appender.A1.threshold=DEBUG
#fileName输出文件名
log4cpp.appender.A1.fileName=/home/wnh/logs/opensync.log
#BasicLayout表示默认的布局
#log4cpp.appender.A1.layout=BasicLayout
log4cpp.appender.A1.layout=PatternLayout
log4cpp.appender.A1.layout.ConversionPattern=%d [%p] %m%n 

##FileAppender方式输出
#log4cpp.appender.A2=FileAppender
##threshold 日志等级的阈值
#log4cpp.appender.A2.threshold=WARN
##fileName输出文件名
#log4cpp.appender.A2.fileName=A2.log
##BasicLayout表示默认的布局
#log4cpp.appender.A2.layout=PatternLayout
#log4cpp.appender.A2.layout.ConversionPattern=%d [%p] %m%n 
#
##RollingFileAppender 滚动文件的方式
#log4cpp.appender.A3=RollingFileAppender
##fileName输出文件名
#log4cpp.appender.A3.fileName=A3.log
##maxFileSize文件大小，单位Byte 超过大小会被滚动覆盖
#log4cpp.appender.A3.maxFileSize=50
##maxBackupIndex 超过maxFileSize的文件在被覆盖前会备份，这个文件也是滚动覆盖的方式
#log4cpp.appender.A3.maxBackupIndex=100
##BasicLayout表示默认的布局
#log4cpp.appender.A3.layout=PatternLayout
#log4cpp.appender.A3.layout.ConversionPattern=%d [%p] %m%n